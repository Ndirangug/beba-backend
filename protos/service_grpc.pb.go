// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TinyErpGrpcClient is the client API for TinyErpGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinyErpGrpcClient interface {
	TestHello(ctx context.Context, in *TestHelloRequest, opts ...grpc.CallOption) (*TestHelloResponse, error)
}

type tinyErpGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTinyErpGrpcClient(cc grpc.ClientConnInterface) TinyErpGrpcClient {
	return &tinyErpGrpcClient{cc}
}

func (c *tinyErpGrpcClient) TestHello(ctx context.Context, in *TestHelloRequest, opts ...grpc.CallOption) (*TestHelloResponse, error) {
	out := new(TestHelloResponse)
	err := c.cc.Invoke(ctx, "/tiny_erp.TinyErpGrpc/TestHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinyErpGrpcServer is the server API for TinyErpGrpc service.
// All implementations must embed UnimplementedTinyErpGrpcServer
// for forward compatibility
type TinyErpGrpcServer interface {
	TestHello(context.Context, *TestHelloRequest) (*TestHelloResponse, error)
	mustEmbedUnimplementedTinyErpGrpcServer()
}

// UnimplementedTinyErpGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedTinyErpGrpcServer struct {
}

func (UnimplementedTinyErpGrpcServer) TestHello(context.Context, *TestHelloRequest) (*TestHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestHello not implemented")
}
func (UnimplementedTinyErpGrpcServer) mustEmbedUnimplementedTinyErpGrpcServer() {}

// UnsafeTinyErpGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinyErpGrpcServer will
// result in compilation errors.
type UnsafeTinyErpGrpcServer interface {
	mustEmbedUnimplementedTinyErpGrpcServer()
}

func RegisterTinyErpGrpcServer(s grpc.ServiceRegistrar, srv TinyErpGrpcServer) {
	s.RegisterService(&TinyErpGrpc_ServiceDesc, srv)
}

func _TinyErpGrpc_TestHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinyErpGrpcServer).TestHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiny_erp.TinyErpGrpc/TestHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinyErpGrpcServer).TestHello(ctx, req.(*TestHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinyErpGrpc_ServiceDesc is the grpc.ServiceDesc for TinyErpGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinyErpGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tiny_erp.TinyErpGrpc",
	HandlerType: (*TinyErpGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestHello",
			Handler:    _TinyErpGrpc_TestHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
